{
  "schema_version": 2,
  "problem_slug": "FOLIO_dev_109",
  "problem_text": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
  "n_tests": 10,
  "n_solutions": 10,
  "predicates": "SpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.",
  "tests": [
    {
      "id": "tc_32c53981",
      "questions": "Based on the above information, is the following statement true or false? Peter is a foodie and goes out frequently to find new food restaurants to try.",
      "conclusions": "Foodie(peter) ∧ GoOutFrequently(peter) ::: Peter is a foodie and goes out frequently to find new food restaurants to try. FALSE"
    },
    {
      "id": "tc_87c7fb32",
      "questions": "Based on the above information, is the following statement true or false? If Peter has parents who are very busy with their regular jobs, then Peter does not spill a lot of food on his clothing.",
      "conclusions": "BusyParents(peter) → ¬SpillFood(peter) ::: TRUE"
    },
    {
      "id": "tc_5db8d0ee",
      "questions": "Based on the above information, is the following statement true or false? If Peter is a foodie, then Peter tidies his spaces consistently.",
      "conclusions": "Foodie(peter) → TidySpace(peter) ::: FALSE"
    },
    {
      "id": "tc_6f369b67",
      "questions": "Based on the above information, is the following statement true or false? If Peter tidies his spaces consistently, then Peter is a foodie.",
      "conclusions": "TidySpace(peter) → Foodie(peter) ::: FALSE"
    },
    {
      "id": "tc_bd7c4f68",
      "questions": "Based on the above information, is the following statement true or false? If Peter is a person who enjoys cleaning and a person who spills a lot of food on his clothing, then Peter does not go out frequently to find new food restaurants to try.",
      "conclusions": "(EnjoyCleaning(peter) ∧ SpillFood(peter)) → ¬GoOutFrequently(peter) ::: FALSE"
    },
    {
      "id": "tc_c811017e",
      "questions": "Based on the above information, is the following statement true or false? If Peter has parents who are very busy with their regular jobs, then Peter enjoys cleaning.",
      "conclusions": "BusyParents(peter) → EnjoyCleaning(peter) ::: TRUE"
    },
    {
      "id": "tc_8b8faaa3",
      "questions": "Based on the above information, is the following statement true or false? If Peter is a foodie, then he does not enjoy cleaning.",
      "conclusions": "Foodie(peter) → ¬EnjoyCleaning(peter) ::: FALSE"
    },
    {
      "id": "tc_efae50cd",
      "questions": "Based on the above information, is the following statement true or false? If Peter is a foodie, then he does not tidy his spaces consistently.",
      "conclusions": "Foodie(peter) → ¬TidySpace(peter) ::: FALSE"
    },
    {
      "id": "tc_38be4e33",
      "questions": "Based on the above information, is the following statement true or false? If Peter is a foodie, then Peter spills a lot of food on his clothing.",
      "conclusions": "Foodie(peter) → SpillFood(peter) ::: TRUE"
    },
    {
      "id": "tc_b72fb719",
      "questions": "Based on the above information, is the following statement true or false? If Peter is a person who enjoys cleaning and is a person who spills a lot of food on his clothing, then Peter grew up as an only child with no siblings.",
      "conclusions": "(EnjoyCleaning(peter) ∧ SpillFood(peter)) → OnlyChild(peter) ::: FALSE"
    }
  ],
  "candidate_solutions": [
    {
      "id": "sol_9d88d4bb",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\nSpillFood(x) → (¬TidySpace(x) ∧ EnjoyCleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n(Foodie(x) ∧ GoOutFrequently(x)) → SpillFood(x) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nOnlyChild(x) → (TidySpace(x) ∧ EnjoyCleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\nBusyParents(x) → OnlyChild(x) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\nHighIncomeHousehold(x) → BusyParents(x) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood) ∧ PeterIs(OnlyChild)) ⊕ ¬(PeterIs(SpillFood) ∨ PeterIs(OnlyChild)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
    },
    {
      "id": "sol_6f60aee8",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\n∀x ((SpillFood(x) ∧ Foodie(x)) → ¬TidySpace(x) ∧ EnjoyCleaning(x)) ::: If people spill a lot of food on their clothing and are foodies, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOutFrequently(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → TidySpace(x) ∧ EnjoyCleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → ¬OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they did not grow up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood) ∧ ¬PeterIs(OnlyChild)) ∨ (¬PeterIs(SpillFood) ∧ PeterIs(OnlyChild)) ::: Peter is either a person who spills a lot of food on his clothing and did not grow up as an only child with no siblings, or he is not a person who spills a lot of food on his clothing and grew up as an only child with no siblings."
    },
    {
      "id": "sol_8d09a350",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\n∀x (SpillFood(x) → (¬TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x ((Foodie(x) ∧ GoOutFrequently(x)) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → (TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood(peter)) ∧ PeterIs(OnlyChild(peter))) ⊕ ¬(PeterIs(SpillFood(peter)) ∨ PeterIs(OnlyChild(peter))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
    },
    {
      "id": "sol_8d2755d7",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\n∀x ((SpillFood(x) ∧ Foodie(x)) → (¬TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing and are foodies, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOutFrequently(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → TidySpace(x) ∧ EnjoyCleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood(peter)) ∧ PeterIs(OnlyChild(peter))) ⊕ ¬(PeterIs(SpillFood(peter)) ∨ PeterIs(OnlyChild(peter))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
    },
    {
      "id": "sol_23b9a2fa",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\n∀x ((SpillFood(x) ∧ Foodie(x)) → (¬TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing and are foodies, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOutFrequently(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → (TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood(peter)) ∧ PeterIs(OnlyChild(peter))) ⊕ ¬(PeterIs(SpillFood(peter)) ∨ PeterIs(OnlyChild(peter))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
    },
    {
      "id": "sol_d3b24c8b",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\n∀x (SpillFood(x) → ¬(TidySpace(x) ∧ ¬EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing, then it is not the case that they tidy their spaces consistently and do not enjoy the process of cleaning.\n∀x ((Foodie(x) ∧ GoOutFrequently(x)) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → (TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood(peter)) ∧ PeterIs(OnlyChild(peter))) ∨ (¬PeterIs(SpillFood(peter)) ∧ ¬PeterIs(OnlyChild(peter))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
    },
    {
      "id": "sol_b7059de4",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\n∀x (SpillFood(x) → ¬TidySpace(x) ∧ EnjoyCleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOutFrequently(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → TidySpace(x) ∧ EnjoyCleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood(peter)) ∧ PeterIs(OnlyChild(peter))) ⊕ ¬(PeterIs(SpillFood(peter)) ∨ PeterIs(OnlyChild(peter))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
    },
    {
      "id": "sol_d498a48c",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\n∀x (SpillFood(x) → (¬TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x ((Foodie(x) ∧ GoOutFrequently(x)) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → (TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood(peter)) ∧ PeterIs(OnlyChild(peter))) ∨ (¬PeterIs(SpillFood(peter)) ∧ ¬PeterIs(OnlyChild(peter))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
    },
    {
      "id": "sol_c8efb1fd",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\n∀x ((SpillFood(x) ∧ Foodie(x)) → (¬TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing and are foodies, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x ((Foodie(x) ∧ GoOutFrequently(x)) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → (TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood(peter)) ∧ PeterIs(OnlyChild(peter))) ⊕ ¬(PeterIs(SpillFood(peter)) ∨ PeterIs(OnlyChild(peter))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
    },
    {
      "id": "sol_9213ecbd",
      "text": "# Predicates:\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpace(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\nPeterIs(x) ::: Peter is x.\n\n# Premises:\n∀x (SpillFood(x) → ¬TidySpace(x) ∧ EnjoyCleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x ((Foodie(x) ∧ GoOutFrequently(x)) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → (TidySpace(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who are very busy with their regular jobs.\n(PeterIs(SpillFood(peter)) ∧ PeterIs(OnlyChild(peter))) ⊕ ¬(PeterIs(SpillFood(peter)) ∨ PeterIs(OnlyChild(peter))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
    }
  ],
  "validation": {
    "id": "tc_bacf3c91",
    "questions": "Based on the above information, is the following statement true, false, or uncertain? Peter tidies his space consistently and enjoys the process of cleaning.",
    "conclusions": "TidySpace(peter) ∧ EnjoyCleaning(peter) ::: Peter tidies his space consistently and enjoys the process of cleaning. unknown"
  }
}