{
  "schema_version": 2,
  "problem_slug": "FOLIO_dev_158",
  "problem_text": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
  "n_tests": 10,
  "n_solutions": 10,
  "predicates": "Student(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.",
  "tests": [
    {
      "id": "tc_76ef250c",
      "questions": "Based on the above information, is the following statement true or false? If James is a student and is from the computer science department, then James has a part-time job offered by the university.",
      "conclusions": "IsStudent(james) ∧ FromCS(james) → HasJob(james) ::: FALSE"
    },
    {
      "id": "tc_94436220",
      "questions": "Based on the above information, is the following statement true or false? If James is a student and works in the lab, then James is not from the computer science department.",
      "conclusions": "IsStudent(james) ∧ WorksInLab(james) → ¬FromCS(james) ::: TRUE"
    },
    {
      "id": "tc_756dac44",
      "questions": "Based on the above information, is the following statement true or false? If Jack is a student and takes the database course, then Jack works in the library.",
      "conclusions": "∀x ((IsStudent(x) ∧ Takes(x, database)) → WorksIn(x, library)) ::: If a student takes the database course, then they work in the library. FALSE"
    },
    {
      "id": "tc_367bc9fe",
      "questions": "Based on the above information, is the following statement true or false? If James has a part-time job offered by the university, then James is not from the computer science department.",
      "conclusions": "HasJob(james) → ¬FromCS(james) ::: FALSE"
    },
    {
      "id": "tc_d9671825",
      "questions": "Based on the above information, is the following statement true or false? If James is a student and is instructed by professor David, then James works in the library.",
      "conclusions": "IsStudent(james) ∧ InstructedBy(james, david) → WorksInLibrary(james) ::: FALSE"
    },
    {
      "id": "tc_c1b6b092",
      "questions": "Based on the above information, is the following statement true or false? If James is a student and James has a part-time job offered by the university, then James is not from the computer science department.",
      "conclusions": "James(x) ∧ IsStudent(x) ∧ HasJob(x) → ¬FromCS(x) ::: FALSE"
    },
    {
      "id": "tc_f82a03f7",
      "questions": "Based on the above information, is the following statement true or false? If Jack is a student and has a part-time job offered by the university, then Jack is not a student who works in the library.",
      "conclusions": "HasJob(jack) → ¬WorksInLibrary(jack) ::: FALSE"
    },
    {
      "id": "tc_7c3eabc0",
      "questions": "Based on the above information, is the following statement true or false? If James is a student who works in the lab, then James is not a student who has a part-time job offered by the university.",
      "conclusions": "James(james) ∧ WorksInLab(james) → ¬HasJob(james) ::: FALSE"
    },
    {
      "id": "tc_1f34db56",
      "questions": "Based on the above information, is the following statement true or false? If James is a student who is instructed by professor David, then James is not from the computer science department.",
      "conclusions": "InstructedBy(james, david) ∧ IsStudent(james) → ¬FromCS(james) ::: FALSE"
    },
    {
      "id": "tc_f7a189e5",
      "questions": "Based on the above information, is the following statement true or false? If Jack is a student and is instructed by professor David, then Jack works in the library.",
      "conclusions": "InstructedBy(jack, professorDavid) → WorksInLibrary(jack) ::: FALSE"
    }
  ],
  "candidate_solutions": [
    {
      "id": "sol_85846290",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((Student(x) ∧ WorksInLibrary(x)) → ¬FromCS(x)) ::: No students who work in the library are from the computer science department.\n∀x (PartTimeJob(x) → WorksInLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (TakesDatabase(x) → FromCS(x)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedByDavid(x) → TakesDatabase(x)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksInLab(x) → InstructedByDavid(x)) ::: All students working in the lab are instructed by professor David.\nStudent(james) ∧ WorksInLab(james) ::: James is a student working in the lab.\n¬PartTimeJob(jack) ∧ ¬WorksInLab(jack) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    },
    {
      "id": "sol_5df6bd97",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((Student(x) ∧ WorksIn(x, library)) → ¬From(x, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (HasJob(x) → WorksIn(x, library)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Takes(x, database) → From(x, computerScience)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedBy(x, david) → Takes(x, database)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksIn(x, lab) → InstructedBy(x, david)) ::: All students working in the lab are instructed by professor David.\nIsStudent(james) ∧ WorksIn(james, lab) ::: James is a student working in the lab.\n¬HasJob(jack) ∧ ¬WorksIn(jack, lab) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    },
    {
      "id": "sol_7bbf2e95",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((IsStudent(x) ∧ WorksIn(x, library)) → ¬From(x, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (HasJob(x) → WorksIn(x, library)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Takes(x, database) → From(x, computerScience)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedBy(x, david) → Takes(x, database)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksIn(x, lab) → InstructedBy(x, david)) ::: All students working in the lab are instructed by professor David.\n∃x (James(x) ∧ IsStudent(x) ∧ WorksIn(x, lab)) ::: James is a student working in the lab.\n∃x (Jack(x) ∧ ¬HasJob(x) ∧ ¬WorksIn(x, lab)) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    },
    {
      "id": "sol_f054b64d",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((IsStudent(x) ∧ WorksIn(x, library)) → ¬From(x, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (HasJob(x) → WorksIn(x, library)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Takes(x, database) → From(x, computerScience)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedBy(x, david) → Takes(x, database)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksIn(x, lab) → InstructedBy(x, david)) ::: All students working in the lab are instructed by professor David.\nIsStudent(james) ∧ WorksIn(james, lab) ::: James is a student working in the lab.\n¬HasJob(jack) ∧ ¬WorksIn(jack, lab) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    },
    {
      "id": "sol_c651ece3",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((Student(x) ∧ WorksInLibrary(x)) → ¬FromCS(x)) ::: No students who work in the library are from the computer science department.\n∀x (PartTimeJob(x) → WorksInLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (TakesDatabase(x) → FromCS(x)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedByDavid(x) → TakesDatabase(x)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksInLab(x) → InstructedByDavid(x)) ::: All students working in the lab are instructed by professor David.\nStudent(james) ∧ WorksInLab(james) ::: James is a student working in the lab.\n¬PartTimeJob(jack) ∧ ¬WorksInLab(jack) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    },
    {
      "id": "sol_d8f4a4d9",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((IsStudent(x) ∧ WorksIn(x, library)) → ¬From(x, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (HasJob(x) → WorksIn(x, library)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Takes(x, database) → From(x, computerScience)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedBy(x, david) → Takes(x, database)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksIn(x, lab) → InstructedBy(x, david)) ::: All students working in the lab are instructed by professor David.\nIsStudent(james) ∧ WorksIn(james, lab) ::: James is a student working in the lab.\n¬HasJob(jack) ∧ ¬WorksIn(jack, lab) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    },
    {
      "id": "sol_b034a65c",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((Student(x) ∧ WorksInLibrary(x)) → ¬FromCS(x)) ::: No students who work in the library are from the computer science department.\n∀x (HasJob(x) → WorksInLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (TakesDatabase(x) → FromCS(x)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedByDavid(x) → TakesDatabase(x)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksInLab(x) → InstructedByDavid(x)) ::: All students working in the lab are instructed by professor David.\nIsStudent(james) ∧ WorksInLab(james) ::: James is a student working in the lab.\n¬HasJob(jack) ∧ ¬WorksInLab(jack) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    },
    {
      "id": "sol_5b1db013",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((IsStudent(x) ∧ WorksIn(x, library)) → ¬From(x, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (HasJob(x) → WorksIn(x, library)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Takes(x, database) → From(x, computerScience)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedBy(x, david) → Takes(x, database)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksIn(x, lab) → InstructedBy(x, david)) ::: All students working in the lab are instructed by professor David.\nIsStudent(james) ∧ WorksIn(james, lab) ::: James is a student working in the lab.\n¬HasJob(jack) ∧ ¬WorksIn(jack, lab) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    },
    {
      "id": "sol_bfe8d18f",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((IsStudent(x) ∧ WorksInLibrary(x)) → ¬FromCS(x)) ::: No students who work in the library are from the computer science department.\n∀x (HasJob(x) → WorksInLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (TakesDatabase(x) → FromCS(x)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedByDavid(x) → TakesDatabase(x)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksInLab(x) → InstructedByDavid(x)) ::: All students working in the lab are instructed by professor David.\nIsStudent(james) ∧ WorksInLab(james) ::: James is a student working in the lab.\n¬HasJob(jack) ∧ ¬WorksInLab(jack) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    },
    {
      "id": "sol_5d56efde",
      "text": "# Predicates:\nStudent(x) ::: x is a student.\nWorksInLibrary(x) ::: x works in the library.\nFromCS(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabase(x) ::: x takes the database course.\nInstructedByDavid(x) ::: x is instructed by professor David.\nWorksInLab(x) ::: x works in the lab.\nPerson(x) ::: x is a person.\nIsStudent(x) ::: x is a student.\nName(x, n) ::: x's name is n.\nHasJob(x) ::: x has a part-time job offered by the university.\nWorksIn(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nTakes(x, y) ::: x takes y.\nInstructedBy(x, y) ::: x is instructed by y.\nJames(x) ::: x is James.\nJack(x) ::: x is Jack.\n\n# Premises:\n∀x ((IsStudent(x) ∧ WorksIn(x, library)) → ¬From(x, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (HasJob(x) → WorksIn(x, library)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Takes(x, database) → From(x, computerScience)) ::: All students who take the database course are from the computer science department.\n∀x (InstructedBy(x, david) → Takes(x, database)) ::: All students instructed by professor David are taking the database course.\n∀x (WorksIn(x, lab) → InstructedBy(x, david)) ::: All students working in the lab are instructed by professor David.\nIsStudent(james) ∧ WorksIn(james, lab) ::: James is a student working in the lab.\n¬HasJob(jack) ∧ ¬WorksIn(jack, lab) ::: Jack neither has a part-time job offered by the university nor works in the lab."
    }
  ],
  "validation": {
    "id": "tc_172eb6d6",
    "questions": "Based on the above information, is the following statement true, false, or uncertain? James has a part-time job offered by the university.",
    "conclusions": "PartTimeJob(james) ::: James has a part-time job offered by the university. false"
  }
}